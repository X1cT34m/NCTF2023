
fx =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
gx =  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
hx =  [500, 283, 490, 488, 505, 295, 214, 205, 346, 2, 395, 366, 66, 300, 221, 287, 237, 114, 447, 444, 354, 260, 75, 504, 130, 358, 345, 473, 131, 86, 336, 105, 305, 476, 467, 229, 419, 223, 236, 161, 164, 88, 135, 366, 293, 49, 349, 439, 270, 165, 101, 75, 239, 143, 225, 100, 490, 155, 494, 258, 501, 418, 225, 62, 77, 121, 91, 97, 114, 409, 459, 328, 212, 127, 56, 26, 142, 183, 198, 402, 321, 47, 475, 367, 306, 128, 290, 264, 427, 241, 313, 259, 30, 505, 283, 462, 475, 229, 331, 37, 451, 123, 284, 388, 379, 48, 305, 400, 194, 111, 259, 497, 299, 390, 504, 178, 62, 335, 156, 339, 324, 48, 484, 26, 267, 366, 240, 353, 335, 109, 212, 218, 241, 395, 193, 257, 293, 359, 215, 476, 328, 193, 300, 247, 189, 131, 262, 275, 51, 418, 162, 458, 453, 330, 163, 435, 327, 450, 449, 72, 317, 240, 258, 496, 302, 15, 258, 211, 489, 336, 134, 454, 110, 211, 232, 323, 498, 258, 96, 131, 504, 232, 480, 81, 155, 272, 174, 222, 457, 257, 38, 361, 92, 114, 421, 307, 166, 376, 84, 89, 93, 121, 510, 272, 261, 246, 496, 499, 505, 44, 30, 404, 267, 411, 507, 380, 266, 150, 408, 448, 227, 94, 275, 124, 235, 310, 74, 331, 261, 45, 478, 30, 95, 502, 28, 391, 79, 272, 378, 177, 112, 469, 295, 145, 221, 310, 202, 319, 192, 376, 201, 251, 250, 217, 415, 75, 501, 498, 404, 157, 111, 226, 75, 296, 219, 370, 165, 270, 208, 391, 372, 511, 242, 393, 71, 136, 156, 338, 337, 398, 94, 67, 175, 469, 316, 347, 415, 291, 384, 208, 398, 450, 328, 390, 106, 56, 173, 455, 238, 52, 369, 395, 24, 156, 51, 92, 123, 364, 128, 401, 477, 216, 98, 15, 342, 481, 106, 64, 331, 423, 378, 11, 376, 86, 147, 283, 236, 120, 466, 12, 37, 76, 101, 475, 134, 350, 501, 350, 280, 489, 420, 469, 63, 474, 110, 388, 349, 152, 197, 139, 404, 376, 505, 457, 385, 475, 113, 143, 509, 344, 102, 94, 432, 373, 466, 457, 392, 87, 7, 331, 320, 169, 504, 376, 236, 78, 193, 394, 489, 243, 423, 87, 368, 91, 318, 183, 52, 441, 266, 244, 408, 199, 385, 177, 260, 433, 259, 103, 175, 404, 249, 141, 345, 481, 5, 46, 3, 434, 126, 477, 59, 203, 354, 115, 43, 215, 12, 40, 171, 147, 62, 434, 493, 250, 57, 233, 27, 40, 388, 63, 273, 468, 112, 463, 483, 160, 255, 439, 494, 417, 184, 364, 404, 235, 169, 478, 277, 245, 456, 464, 194, 481, 273, 172, 362, 229, 249, 77, 431, 485, 281, 303, 1, 201, 11, 381, 228, 38, 406, 367, 403, 482, 441, 43, 162, 255, 176, 36, 439, 492, 135, 27, 130, 171, 503, 430, 116, 194, 324, 91, 428, 438, 298, 440, 326, 186, 368, 374, 89, 391, 459, 215, 66, 249, 374, 417, 438, 230, 488]

e=[138, 414, 160, 348, 201, 132, 417, 447, 429, 342, 363, 190, 136, 217, 49, 4, 299, 471, 100, 486, 491, 60, 347, 397, 374, 105, 275, 281, 465, 415, 98, 31, 334, 460, 498, 225, 42, 431, 93, 321, 207, 31, 310, 18, 12, 314, 502, 450, 128, 64, 120, 101, 171, 276, 240, 262, 510, 80, 121, 158, 312, 340, 415, 362, 263, 85, 212, 411, 53, 101, 85, 317, 500, 79, 316, 58, 486, 370, 467, 148, 107, 176, 206, 154, 35, 456, 23, 12, 212, 163, 310, 441, 117, 371, 321, 399, 253, 49, 420, 511, 92, 289, 489, 265, 313, 105, 82, 367, 8, 100, 122, 204, 496, 213, 466, 44, 345, 257, 388, 23, 58, 188, 307, 270, 448, 499, 289, 427, 392, 56, 97, 454, 204, 170, 351, 230, 180, 273, 61, 80, 208, 124, 222, 419, 118, 453, 28, 161, 289, 472, 436, 445, 326, 500, 35, 195, 289, 179, 284, 325, 359, 267, 290, 487, 501, 312, 471, 241, 152, 85, 373, 471, 372, 442, 201, 208, 351, 168, 112, 332, 30, 234, 441, 399, 315, 320, 53, 106, 348, 365, 274, 262, 245, 398, 504, 224, 118, 196, 233, 497, 155, 498, 338, 180, 228, 194, 101, 85, 125, 436, 464, 136, 310, 367, 16, 330, 227, 218, 132, 190, 70, 214, 300, 190, 95, 164, 474, 275, 321, 376, 149, 259, 489, 342, 487, 464, 261, 52, 75, 177, 12, 241, 262, 450, 248, 120, 489, 310, 352, 184, 507, 495, 165, 136, 143, 318, 199, 43, 174, 321, 333, 72, 92, 52, 442, 481, 203, 470, 50, 378, 411, 300, 69, 340, 325, 495, 474, 321, 453, 56, 386, 328, 19, 300, 400, 139, 120, 156, 282, 257, 362, 156, 70, 479, 505, 231, 34, 257, 153, 157, 148, 488, 419, 24, 208, 426, 507, 284, 221, 457, 122, 107, 329, 186, 352, 499, 295, 232, 35, 259, 68, 447, 491, 449, 396, 327, 417, 250, 441, 381, 4, 349, 88, 158, 202, 356, 45, 255, 492, 126, 307, 480, 485, 282, 231, 184, 16, 384, 490, 118, 69, 152, 437, 444, 42, 120, 16, 22, 11, 301, 135, 307, 227, 466, 323, 202, 511, 61, 178, 121, 233, 396, 130, 18, 47, 321, 367, 55, 242, 253, 200, 369, 263, 357, 154, 298, 185, 449, 37, 196, 408, 141, 416, 437, 450, 126, 258, 474, 149, 356, 194, 125, 310, 321, 103, 292, 92, 475, 364, 294, 310, 264, 453, 321, 247, 393, 52, 9, 166, 13, 503, 417, 75, 33, 305, 511, 302, 466, 503, 149, 462, 145, 445, 94, 381, 107, 246, 206, 230, 141, 407, 358, 322, 259, 463, 497, 38, 208, 229, 289, 381, 446, 485, 507, 85, 510, 213, 115, 456, 356, 67, 310, 256, 176, 227, 178, 471, 195, 122, 178, 337, 48, 476, 380, 377, 367, 328, 48, 145, 347, 143, 70, 14, 395, 169, 212, 131, 498, 486, 219, 45, 27, 294, 438, 187, 381, 494, 229, 221, 510, 2, 503, 263, 325, 389, 326, 73, 153, 11]
# Sage
from Crypto.Util.number import *


class NTRU:
    def __init__(self, N, p, q, d):
        self.debug = False

        assert q > (6*d+1)*p
        assert is_prime(N)
        assert gcd(N, q) == 1 and gcd(p, q) == 1
        self.N = N
        self.p = p
        self.q = q
        self.d = d
      
        self.R_  = PolynomialRing(ZZ,'x')
        self.Rp_ = PolynomialRing(Zmod(p),'xp')
        self.Rq_ = PolynomialRing(Zmod(q),'xq')
        x = self.R_.gen()
        xp = self.Rp_.gen()
        xq = self.Rq_.gen()
        self.R  = self.R_.quotient(x^N - 1, 'y')
        self.Rp = self.Rp_.quotient(xp^N - 1, 'yp')
        self.Rq = self.Rq_.quotient(xq^N - 1, 'yq')

        # order check in keyGen
        #self.RpOrder = self.p^(self.N - 1) - 1
        #self.RqOrder = (self.q^self.N - self.q) // (self.q-1)
        self.RpOrder = self.p^self.N - self.p
        self.RqOrder = self.q^self.N - self.q
        self.sk, self.pk = self.keyGen()

    def T(self, d1, d2):
        assert self.N >= d1+d2
        t = [1]*d1 + [-1]*d2 + [0]*(self.N-d1-d2)
        shuffle(t)
        return self.R(t)

    # center lift
    def lift(self, fx):
        mod = Integer(fx.base_ring()(-1)) + 1  # emmm
        return self.R([Integer(x)-mod if x > mod//2 else x for x in list(fx)])

    def keyGen(self):
        fx = self.T(self.d+1, self.d)
        gx = self.T(self.d, self.d)

        Fp = self.Rp(list(fx)) ^ (-1)                           # list emmm
        assert pow(self.Rp(list(fx)), self.RpOrder-1) == Fp     # order checked
        assert self.Rp(list(fx)) * Fp == 1                
        
        # Fq = self.Rq(fx) ^ (-1)   # wasted
        Fq = pow(self.Rq(list(fx)), self.RqOrder - 1)     # invert
        assert self.Rq(list(fx)) * Fq == 1                # order checked
        
        hx = Fq * self.Rq(list(gx))

        sk = (fx, gx, Fp, Fq, hx)
        pk = hx
        return sk, pk


    def setKey(self, fx, gx):
        #assert type(fx) == type('x^2 + 1')  # e.g.
        #assert type(gx) == type('x^2 - 1')  # emmm

        try:
          fx = self.R(fx)
          gx = self.R(gx)

          Fp = self.Rp(list(fx)) ^ (-1)
          Fq = pow(self.Rq(list(fx)), self.RqOrder - 1)
          hx = Fq * self.Rq(list(gx))

          self.sk = (fx, gx, Fp, Fq, hx)
          self.pk = hx
          return True
        except:
          return False

    
    def getKey(self):
        ssk = (
              self.R_(list(self.sk[0])),   # fx
              self.R_(list(self.sk[1]))    # gx
            )
        spk = self.Rq_(list(self.pk))      # hx
        return ssk, spk
     
    def pad(self,msg):
        pad_length = self.N - len(msg)
        msg += [-1 for _ in range(pad_length)]
        return msg

    def unpad(self,msg):
        length = len(msg)
        for i in range(length):
            if msg[i] == -1:
                length = i
                break
        return msg[:length]

    def encode(self,msg):
        result = []
        for i in msg:
            result += [int(_) for _ in bin(i)[2:].zfill(8)]
        if len(result) < self.N:result = self.pad(result)
        result = self.R(result)
        return result
      
    def decode(self,msg):
        result = ''.join(list(map(str,self.unpad(msg))))
        result = int(result,2)

        return long_to_bytes(result)
        

    def encrypt(self, m):
        #assert type(m) == type('x^2 + 1') # e.g.
        m = self.encode(m)
        assert self.pk != None
        hx = self.pk
        mx = self.R(m)
        mx = self.Rp(list(mx))              # change m to Rp, TODO: assert m in Rp
        mx = self.Rq(list(mx))              # change m to Rq

        rx = self.T(self.d, self.d)
        rx = self.Rq(list(rx))
        
        e = self.p * rx * hx + mx
        #return e
        return list(e)#str(self.Rq_(list(e)))


    def decrypt(self, e):
        #assert type(e) == type('xq^2 - 1')  # e.g.
        assert self.sk != None
        fx, gx, Fp, Fq, hx = self.sk

        e = self.Rq(e)
        ax = self.Rq(list(fx)) * e
        a = self.lift(ax)                   # center lift
        bx = Fp * self.Rp(list(a))
        b = self.lift(bx)
        m = self.decode(b.list())
        
        #return bx
        return m#str(self.R_(list(b)))

    
ntru = NTRU(N=509, p=3, q=512, d=3)
ntru.setKey(fx,gx)
m = ntru.decrypt(e)
print(m)
